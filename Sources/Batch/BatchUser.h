//
//  BatchUser.h
//  Batch
//
//  https://batch.com
//  Copyright (c) Batch SDK. All rights reserved.
//

#import <Batch/BatchEventData.h>
#import <CoreLocation/CoreLocation.h>
#import <Foundation/Foundation.h>

@class BatchUserDataEditor, BatchUserAttribute;

/// Notification sent by Batch when the event tracker has finished sending notifications to the server.
///
/// Multiple events of this kind can occur in a short period of time.
/// - Note: If Batch isn't started or if it is opted-out from, this notification will __NOT__ be emitted.
FOUNDATION_EXPORT NSString *_Nonnull const BatchEventTrackerFinishedNotification;

/// Key of `BatchEventTrackerFinishedNotification's userInfo`, indicating whether the event tracker has successfully
/// sent events to the server or not.
FOUNDATION_EXPORT NSString *_Nonnull const BatchEventTrackerFinishedWithSuccessKey;

/// Error domain of error when ``BatchUserDataEditor`` fail.
FOUNDATION_EXPORT NSErrorDomain const _Nonnull BatchUserDataEditorErrorDomain;

/// User data editor error codes.
typedef NS_ERROR_ENUM(BatchUserDataEditorErrorDomain, BatchUserDataEditorError){

    /// Internal error.
    BatchUserDataEditorErrorInternal = 0,

    /// The key is invalid. This also applies to tag collection names, as they're considered keys.
    BatchUserDataEditorErrorInvalidKey = 1,

    /// The value is invalid: see the error description for more info.
    BatchUserDataEditorErrorInvalidValue = 2,
};

/// Enum defining the state of an email subscription
typedef NS_ENUM(NSUInteger, BatchEmailSubscriptionState) {
    BatchEmailSubscriptionStateSubscribed = 0,
    BatchEmailSubscriptionStateUnsubscribed = 1,
};

/// Batch's User Module
@interface BatchUser : NSObject

/// Get the unique installation ID, generated by Batch.
///
/// - Returns: Batch-generated installation ID. Might be nil if Batch isn't started.
+ (nullable NSString *)installationID;

/// Get the user data editor.
///
/// Do not forget to call save once you're done changing the attributes
/// You can call this method from any thread.
/// - Returns: A ``BatchUserDataEditor`` instance
+ (nonnull BatchUserDataEditor *)editor;

/// Get the user language
///
/// - Returns: The custom language set with ``BatchUserDataEditor``, or nil if none was set.
+ (nonnull NSString *)language;

/// Get the user region
///
/// - Returns: The region set with ``BatchUserDataEditor``, or nil if none was set.
+ (nonnull NSString *)region;

/// Get the custom user identifier
///
/// - Returns: The custom identifier set with ``BatchUserDataEditor``, or nil if none was set.
+ (nullable NSString *)identifier;

/// Read the saved attributes. Reading is asynchronous so as not to interfere with saving operations.
///
/// - Parameter completionHandler: Completion block that contains a dictionary of attributes.
/// The keys are the ones used when setting the attributes, the values are of type BatchUserAttribute.
/// See ``BatchUserAttribute`` for more information.
+ (void)fetchAttributes:
    (void (^_Nonnull)(NSDictionary<NSString *, BatchUserAttribute *> *_Nullable attributes))completionHandler;

/// Read the saved tag collections.
///
/// Reading is asynchronous so as not to interfere with saving operations.
/// - Note:Tags are saved in lowercase.
/// - Parameter completionHandler: Completion block that contains a dictionary of sets of tags.
/// The keys are the ones used when  setting the tags collections.
+ (void)fetchTagCollections:
    (void (^_Nonnull)(NSDictionary<NSString *, NSSet<NSString *> *> *_Nullable collections))completionHandler;

/// Track an event.
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
/// - Parameter event: The event name. It should be made of letters, numbers or underscores (`[a-z0-9_]`)
/// and can't be longer than 30 characters.
+ (void)trackEvent:(nonnull NSString *)event;

/// Track an event.
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
/// - Parameters:
///   - event: The event name. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and can't be longer
///   than 30 characters.
///   - label: The event label (optional). Must be a string.
+ (void)trackEvent:(nonnull NSString *)event withLabel:(nullable NSString *)label;

/// Track an event. (Deprecated)
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
/// - Parameters:
///   - event: The event name. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and can't be longer
///   than 30 characters.
///   - label: The event label (optional). Must be a string.
///   - data: The event data (optional). Must a serializable JSON Foundation dictionary (meaning that it must pass
///   `+[NSJSONSerialization isValidJSONObject]`'s check). See `NSJSONSerialization` documentation for supported types,
///   with the only difference that the top level object __MUST BE__ a NSDictionary and not a NSArray.
///   - Warning: __Deprecated:__ See ``BatchUser/trackEvent:withLabel:associatedData:``. Data sent using this method
///   might be truncated if it can't be converted to a BatchEventData instance.
+ (void)trackEvent:(nonnull NSString *)event
         withLabel:(nullable NSString *)label
              data:(nullable NSDictionary *)data __attribute__((deprecated(
                       "Please migrate to [BatchUser trackEvent:withLabel:associatedData:]. Data sent using this "
                       "method might be truncated if it can't be converted to a BatchEventData instance.")));

/// Track an event.
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
///
/// - Parameters:
///   - event: The event name. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and can't be longer
///   than 30 characters.
///   - label: The event label (optional). Must be a string.
///   - data: The event data (optional).
+ (void)trackEvent:(nonnull NSString *)event
         withLabel:(nullable NSString *)label
    associatedData:(nullable BatchEventData *)data NS_SWIFT_NAME(trackEvent(_:withLabel:data:));

/// Track a transaction
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
/// - Parameter amount: Transaction's amount.
+ (void)trackTransactionWithAmount:(double)amount;

/// Track a transaction.
///
/// You can call this method from any thread. Batch must be started at some point, or events won't be sent to the
/// server.
/// - Parameters:
///   - amount: Transaction's amount.
///   - data: The transaction data (optional). Must a serializable JSON Foundation dictionary (meaning that it must pass
///   `+[NSJSONSerialization isValidJSONObject]`'s check). See `NSJSONSerialization` documentation for supported types,
///   with the only difference that the top level object __MUST BE__ a NSDictionary and not a NSArray.
+ (void)trackTransactionWithAmount:(double)amount data:(nullable NSDictionary *)data;

/// Track a geolocation update.
///
/// You can call this method from any thread. Batch must be started at some point, or location updates won't be sent to
/// the server. You'll usually call this method in your `CLLocationManagerDelegate` implementation
/// - Parameter location: The user's location in the form of a `CLLocation` object, ideally the one provided by the
/// system to your delegate.
+ (void)trackLocation:(nonnull CLLocation *)location;

/// Print the currently known attributes and tags for a user to the logs (stderr/syslog).
+ (void)printDebugInformation;

@end

/// Provides user custom data methods
///
/// # Setting an attribute
/// ```swift
/// // Get a new editor instance.
/// // You need to save this in a local variable until you call save
/// // Editor instances don't share changes, and calling save on an empty editor will do nothing
/// let editor = BatchUser.editor()
/// // Set an attribute. try? allows a potential error to be silently ignored
/// // This example is a valid key/attribute pair, and will not throw an error.
/// try? editor.set(attribute: 26, forKey:"age")
/// do {
///   // Invalid attribute name, $ is a forbidden character
/// try editor.set(attribute: "patricia", forKey: "fir$t_name")
/// } catch {
///    // Handle the error here.
///   // Error is of type BatchUserDataEditorError if you want to specifically
///   // handle it.
/// }
/// editor.save() // Don't forget to save the changes
/// ```
///
/// # Removing an attribute
/// ```swift
/// // Get a new editor instance.
/// // You need to save this in a local variable until you call save
/// // Editor instances don't share changes, and calling save on an empty editor will do nothing
/// let editor = BatchUser.editor()
/// editor.removeAttribute(forKey: "age") // Remove an attribute
/// editor.clearAttributes() // Removes all attributes
/// editor.save() // Don't forget to save the changes
/// ```
///
/// # Managing tag collections
/// ```swift
/// // Get a new editor instance.
/// // You need to save this in a local variable until you call save
/// // Editor instances don't share changes, and calling save on an empty editor will do nothing
/// let editor = BatchUser.editor()
/// editor.addTag("has_bought", inCollection: "actions") // Add a tag to the "actions" collection
/// editor.removeTag("has_bought", fromCollection: "actions") // Remove it
/// editor.clearTagCollection("actions") // Removes all tags from that collection
/// // editor.clearTags() // Removes all tag collections and tags
/// editor.save(); // Don't forget to save the changes
/// ```
@interface BatchUserDataEditor : NSObject

/// Override the detected user language.
///
/// - Parameter language: Language override: lowercase, ISO 639 formatted string. nil to reset.
- (void)setLanguage:(nullable NSString *)language;

/// Override the detected user region.
/// - Parameter region: Region override: uppercase, ISO 3166 formatted string. nil to reset.
- (void)setRegion:(nullable NSString *)region;

/// Set the user identifier.
///
/// - Important: Be careful: you should make sure the identifier uniquely identifies a user. When pushing an identifier,
/// all installations with that identifier will get the Push, which can cause some privacy issues if done wrong.
/// - Parameter identifier: User identifier.
- (void)setIdentifier:(nullable NSString *)identifier;

/// Set the user attribution identifier.
///
/// - Parameter attributionID: A valid UUID string or null to reset.
- (void)setAttributionIdentifier:(nullable NSString *)attributionID;

/// Set the user email.
///
/// - Important: This method requires to already have a registered identifier for the user
/// or to call ``BatchUserDataEditor/setIdentifier:`` method before this one.
/// - Parameters:
///    - email: User email.
///    - error Pointer to an error describing. Note that the error is only about validation  and doesn't
///    mean the value has been sent to the server yet.
/// - Returns:  A boolean indicating whether the attribute passed validation or not.
- (BOOL)setEmail:(nullable NSString *)email error:(NSError *_Nullable *_Nullable)error;

/// Set the user email subscription state.
///
/// - Parameters:
///    - state: Subscription state
- (void)setEmailMarketingSubscriptionState:(BatchEmailSubscriptionState)state;

/// Set a custom user attribute for a key.
///
/// The attribute can be one of the following types, or their native Swift equivalent.
/// - NSString
///   - Must not be longer than 64 characters. Can be empty.
///   - For better results, you should make them upper/lowercase and trim the whitespaces.
/// - NSNumber
///   - Anything bigger than a `long long` or a `double` will be rejected.
///   - Unsigned values will be rejected.
///   - Booleans are supported, but should be initialized with `[NSNumber numberWithBool:<your value>]` or `@YES/@NO`.
/// - NSDate
///   - Note that since timezones are not supported, this will typically represent UTC dates.
///   - Using any unsupported type as a value (`NSNull, NSObject, NSArray, NSDictionary` for example) will **NOT** work.
/// - NSURL
///   - Must not be longer than 2048 characters. Can't be empty.
///   - Must follow the format `scheme://[authority][path][?query][#fragment]`.
/// - Parameters:
///   - attribute: The attribute value. If nil, the attribute will be removed. See method description for more info
///   about what's allowed.
///   - key:  The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///   can't be longer than 30 characters.
- (void)setAttribute:(nullable NSObject *)attribute forKey:(nonnull NSString *)key;

/// Set a boolean custom user attribute for a key.
///
/// - Parameters:
///   - attribute: The attribute value.
///   - key:  The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setBooleanAttribute:(BOOL)attribute
                     forKey:(nonnull NSString *)key
                      error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set a date custom user attribute for a key.
///
/// - Note: Since timezones are not supported, this will typically represent UTC dates.
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setDateAttribute:(nonnull NSDate *)attribute
                  forKey:(nonnull NSString *)key
                   error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set a string custom user attribute for a key.
///
/// Must not be longer than 64 characters. Can be empty.
/// For better results, you should make them upper/lowercase and trim the whitespaces.
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setStringAttribute:(nonnull NSString *)attribute
                    forKey:(nonnull NSString *)key
                     error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set a boolean custom user attribute for a key.
///
/// Anything bigger than a `long long` or a `double` will be rejected.
/// Unsigned values will be rejected.
/// Booleans are supported, but should be initialized with `[NSNumber numberWithBool:<your value>]` or `@YES/@NO`.
/// - Note: `setBoolean/Integer/LongLong/Float/Double` should be preferred over this method, especially for booleans.
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setNumberAttribute:(nonnull NSNumber *)attribute
                    forKey:(nonnull NSString *)key
                     error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set an `NSInteger/Int` custom user attribute for a key.
///
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setIntegerAttribute:(NSInteger)attribute
                     forKey:(nonnull NSString *)key
                      error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set an `long long/Int64` custom user attribute for a key.
///
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setLongLongAttribute:(long long)attribute
                      forKey:(nonnull NSString *)key
                       error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set an float custom user attribute for a key.
///
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setFloatAttribute:(float)attribute
                   forKey:(nonnull NSString *)key
                    error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set an double custom user attribute for a key.
///
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setDoubleAttribute:(double)attribute
                    forKey:(nonnull NSString *)key
                     error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Set an url custom user attribute for a key.
///
/// Must not be longer than 2048 characters. Can't be empty or nil.
/// Must follow the format `scheme://[authority][path][?query][#fragment]`.
/// - Parameters:
///   - attribute: The attribute value.
///   - key: The attribute key. Can't be nil. It should be made of letters, numbers or underscores (`[a-z0-9_]`) and
///     can't be longer than 30 characters.
///   - error: Pointer to an error describing. Note that the error is only about key/value validation, and doesn't
///     mean the value has been sent to the server yet.
/// - Returns: A boolean indicating whether the attribute passed validation or not.
- (BOOL)setURLAttribute:(nonnull NSURL *)attribute
                 forKey:(nonnull NSString *)key
                  error:(NSError *_Nullable *_Nullable)error NS_SWIFT_NAME(set(attribute:forKey:));

/// Removes an attribute for the specified key.
///
/// - Parameter key: The attribute key. Can't be nil.
- (void)removeAttributeForKey:(nonnull NSString *)key;

/// Removes all custom attributes.
///
/// - Important: Once saved, this action cannot be undone.
- (void)clearAttributes;

/// Add a tag to the specified collection. If empty, the collection will be created automatically.
///
/// - Parameters:
///   - tag: The tag to add. Cannot be nil or empty. Must be a string no longer than 64 characters.
///   - collection: The tag collection name. Cannot be nil. Must be a string of letters, numbers or underscores
///     (`[a-z0-9_]`) and can't be longer than 30 characters.
- (void)addTag:(nonnull NSString *)tag inCollection:(nonnull NSString *)collection;

/// Removes a tag from the specified collection.
///
/// - Parameters:
///   - tag: Removes a tag from the specified collection.
///   - collection: The tag collection name. Cannot be nil. Must be a string of letters, numbers or underscores
///     (`[a-z0-9_]`) and can't be longer than 30 characters. If the collection doesn't exist, this method will do
///     nothing, but apply won't fail.
- (void)removeTag:(nonnull NSString *)tag fromCollection:(nonnull NSString *)collection;

/// Removes all tags.
///
/// - Important: Once saved, this action cannot be undone.
- (void)clearTags;

/// Removes all tags from a collection.
///
/// - Important: Once applied, this action cannot be undone.
/// - Parameter collection: The tag collection name. Cannot be nil. Must be a string of letters, numbers or underscores
///   (`[a-z0-9_]`) and can't be longer than 30 characters.
- (void)clearTagCollection:(nonnull NSString *)collection;

/// Save all of the pending changes made in that editor.
///
/// - Important:This action cannot be undone.
- (void)save;

@end
